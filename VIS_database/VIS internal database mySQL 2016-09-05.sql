/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 12.1 		*/
/*  Created On : 05-sep-2016 10:18:25 				*/
/*  DBMS       : MySql 						*/
/* ---------------------------------------------------- */

SET FOREIGN_KEY_CHECKS=0 
;

/* Drop Tables */

DROP TABLE IF EXISTS `Aclobject` CASCADE
;

DROP TABLE IF EXISTS `Connectionstatus` CASCADE
;

DROP TABLE IF EXISTS `Identity` CASCADE
;

DROP TABLE IF EXISTS `Logdata` CASCADE
;

DROP TABLE IF EXISTS `Logevent` CASCADE
;

DROP TABLE IF EXISTS `Publishedmessages` CASCADE
;

DROP TABLE IF EXISTS `Schema` CASCADE
;

DROP TABLE IF EXISTS `Subscription` CASCADE
;

DROP TABLE IF EXISTS `Uploadedmessages` CASCADE
;

/* Create Tables */

CREATE TABLE `Aclobject`
(
	`Messageid` string 	 NULL COMMENT 'Reference to data related to the ACL object',
	`Identity` BIGINT 	 NULL COMMENT 'Identities that have access to the information object',
	`Lastupdatetime` dateTime 	 NULL COMMENT 'Time of last update',
	`AclobjectID` Integer NOT NULL,
	`IdentityID` INTEGER 	 NULL,
	CONSTRAINT `PK_Aclobject` PRIMARY KEY (`AclobjectID` ASC)
)
COMMENT='ACL objects for each information/data object.'

;

CREATE TABLE `Connectionstatus`
(
	`Component` string 	 NULL COMMENT 'Name on component (e.g. STM Module)',
	`Lastinteraction` dateTime 	 NULL COMMENT 'Date and time for last interaction with STM Module.',
	`Connectionstatus` connectionStatus 	 NULL COMMENT 'Known status on connection to STM Module (ship or ship representative) -1=Unknown 0=Not connected 1=Connected',
	`ConnectionstatusID` Integer NOT NULL,
	CONSTRAINT `PK_Connectionstatus` PRIMARY KEY (`ConnectionstatusID` ASC)
)
COMMENT='Contains timestamp for last known contact with specified component (such as STM Module)'

;

CREATE TABLE `Identity`
(
	`Identityname` string 	 NULL COMMENT 'Name of identity (ISSUE Could be that we need to store more information from the certificate (or store the certificate)',
	`IdentityID` Integer NOT NULL,
	CONSTRAINT `PK_Identity` PRIMARY KEY (`IdentityID` ASC)
)

;

CREATE TABLE `Logdata`
(
	`Time` dateTime 	 NULL COMMENT 'Timestamp of log',
	`System` string 	 NULL COMMENT 'Name on system/subsystem',
	`Component` string 	 NULL COMMENT 'Name on component',
	`Messagetype` int 	 NULL COMMENT 'Type of message/data',
	`Data` BLOB 	 NULL COMMENT 'The actual logged data',
	`LogdataID` Integer NOT NULL,
	CONSTRAINT `PK_Logdata` PRIMARY KEY (`LogdataID` ASC)
)
COMMENT='Contains data log for evaluation of STM'

;

CREATE TABLE `Logevent`
(
	`Time` dateTime 	 NULL COMMENT 'Timestamp of log',
	`System` string 	 NULL COMMENT 'Name on system/subsystem',
	`Component` string 	 NULL COMMENT 'Name on component',
	`Eventcategory` string 	 NULL COMMENT 'Category of event according to enumeration',
	`Eventnumber` int 	 NULL COMMENT 'Event number according to enumeration',
	`Eventname` string 	 NULL,
	`Eventdescription` string 	 NULL COMMENT 'Free description of event',
	`Eventdata` string 	 NULL COMMENT 'Attached data for the event (ISSUE Is this needed? Or LogData shall be used for data log?)',
	`LogeventID` Integer NOT NULL,
	CONSTRAINT `PK_Logevent` PRIMARY KEY (`LogeventID` ASC)
)
COMMENT='Contains event log for evaluation of STM'

;

CREATE TABLE `Publishedmessages`
(
	`Publishtime` dateTime 	 NULL COMMENT 'Publish time to VIS (set by VIS when received)',
	`Messageid` string 	 NULL COMMENT 'Identity of the message (extracted from the message). In case of voyage plan it''s the UVID.',
	`Messagestatus` string 	 NULL COMMENT 'Status on the message (extracted or derived from the message). In case of voyage plan it''s the routeStatus.',
	`Messagelastupdatetime` dateTime 	 NULL COMMENT 'Time of update of the message (extracted from the message)',
	`Messagetype` messageType 	 NULL COMMENT 'Type of message (enumeration)',
	`Message` BLOB 	 NULL COMMENT 'The actual message in raw format',
	`Schema` string 	 NULL COMMENT 'Message schema',
	`PublishedmessagesID` Integer NOT NULL,
	`SchemaID` INTEGER 	 NULL,
	CONSTRAINT `PK_Publishedmessages` PRIMARY KEY (`PublishedmessagesID` ASC)
)
COMMENT='Contains published messages from STM Module (e.g. routes in RTZ)'

;

CREATE TABLE `Schema`
(
	`Name` string 	 NULL COMMENT 'Name of the schema',
	`Schema` BLOB 	 NULL COMMENT 'Schema in XSD format',
	`SchemaID` Integer NOT NULL,
	CONSTRAINT `PK_Schema` PRIMARY KEY (`SchemaID` ASC)
)
COMMENT='Contains valid schemas for validation of data'

;

CREATE TABLE `Subscription`
(
	`Messageid` string 	 NULL COMMENT 'Message ID to subscribe on. In the case of VIS it''s a UVID. Empty means subscription on all published voyage plans from the ship independent on UVID.',
	`Messagetype` messageType 	 NULL COMMENT 'Type of message subscribed on. In case of VIS it''s currently RTZ of defined versions.',
	`Callbackendpoint` string 	 NULL COMMENT 'The URL to subscribers uploadVoyagePlan endpoint where published voyage plans are forwarded.',
	`Subscriberidentity` string 	 NULL COMMENT 'Identity of subscriber. Used to check against ACL.',
	`Timeofsubscriptionrequest` dateTime 	 NULL COMMENT 'Time for start of subscription ',
	`Timeoflastsentmessage` dateTime 	 NULL COMMENT 'Time for last sent message to subscriber',
	`SubscriptionID` Integer NOT NULL,
	CONSTRAINT `PK_Subscription` PRIMARY KEY (`SubscriptionID` ASC)
)
COMMENT='Contains active subscriptions'

;

CREATE TABLE `Uploadedmessages`
(
	`Receivetime` dateTime 	 NULL COMMENT 'Received time set by VIS',
	`From` string 	 NULL COMMENT 'Source identity of the message',
	`Deliveryackreqested` BOOL 	 NULL COMMENT 'Flag if Acknowledge is requested when message transferred to the STM Module (ship)',
	`Ackdelivered` BOOL 	 NULL COMMENT 'Flag when Acknowledgement is sent',
	`Deliveryackendpoint` string 	 NULL COMMENT 'Endpoint (complete URI) where Acknowledge shall be sent when message transferred to STM Module (ship or ship representative)',
	`Fetchedbyship` BOOL 	 NULL COMMENT 'Flag if message is fetched/sent to STM Module (ship or ship representative)',
	`Fetchtime` dateTime 	 NULL COMMENT 'Time when message is fetched/sent to STM Module (ship or ship representative)',
	`Messagetype` messageType 	 NULL COMMENT 'Type of message (enumeration)',
	`Message` BLOB 	 NULL COMMENT 'The message in raw format',
	`UploadedmessagesID` Integer NOT NULL,
	CONSTRAINT `PK_Uploadedmessages` PRIMARY KEY (`UploadedmessagesID` ASC)
)
COMMENT='Contains uploaded messages to VIS to be forwarded to STM Module (e.g. route, text message, polygon)'

;

/* Create Foreign Key Constraints */

ALTER TABLE `Aclobject` 
 ADD CONSTRAINT `FK_ACLObject_UID`
	FOREIGN KEY (`IdentityID`) REFERENCES `Identity` (`IdentityID`) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE `Publishedmessages` 
 ADD CONSTRAINT `FK_publishedMessages_UID`
	FOREIGN KEY (`SchemaID`) REFERENCES `Schema` (`SchemaID`) ON DELETE No Action ON UPDATE No Action
;

SET FOREIGN_KEY_CHECKS=1 
;
