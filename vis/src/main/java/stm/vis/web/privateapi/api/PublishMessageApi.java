/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package stm.vis.web.privateapi.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import stm.vis.web.privateapi.model.ResponseObj;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-31T17:12:17.402Z")

@Api(value = "publishMessage", description = "the publishMessage API")
public interface PublishMessageApi {

	@ApiOperation(value = "Publish message to VIS database for subsequent sending to subscribers", notes = "", response = ResponseObj.class, tags = {
			"PublishMessage", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Success", response = ResponseObj.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Void.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Void.class) })

	@RequestMapping(value = "/publishMessage", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<ResponseObj> publishMessagePublishMessage(
			@NotNull @ApiParam(value = "data Id for published message normally this is the UVID", required = true) @RequestParam(value = "dataId", required = true) String dataId,
			@NotNull @ApiParam(value = "Message type for published message (RTZ)", required = true) @RequestParam(value = "messageType", required = true) String messageType,
			@ApiParam(value = "Typically STM payload data (RTZ)", required = true) @Valid @RequestBody String message);

}
