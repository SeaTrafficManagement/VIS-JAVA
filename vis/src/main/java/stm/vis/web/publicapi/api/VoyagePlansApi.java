/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package stm.vis.web.publicapi.api;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import stm.vis.web.publicapi.model.GetSubscriptionResponse;
import stm.vis.web.publicapi.model.GetVoyagePlanResponse;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-09-01T09:18:32.002Z")

@Api(value = "voyagePlans", description = "the voyagePlans API")
public interface VoyagePlansApi {

	@ApiOperation(value = "", notes = "Retrieve a list of subcribed UVID for the callBackEndPoint and Organization", response = GetSubscriptionResponse.class, responseContainer = "List", tags = {
			"VoyagePlan", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = GetSubscriptionResponse.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request", response = Void.class),
			@ApiResponse(code = 401, message = "Unauthorized (the user cannot be authenticated in the Identity Registry)", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden (Not authorized request forwarded to operator)", response = Void.class),
			@ApiResponse(code = 404, message = "Not Found (the requested Voyage Plan is not found)", response = Void.class),
			@ApiResponse(code = 405, message = "Method not allowed", response = Void.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Void.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Void.class) })

	@RequestMapping(value = "/voyagePlans/subscription", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<GetSubscriptionResponse>> getSubscriptionToVoyagePlans(HttpServletRequest request,
			@NotNull @ApiParam(value = "Callback expected. Base URL of the vis instance as in the Service Registry. The callback response will be sent to the voyagePlans endPoint of the instance", required = true) @RequestParam(value = "callbackEndpoint", required = true) String callbackEndpoint);

	@ApiOperation(value = "", notes = "Returns active VoyagePlans", response = GetVoyagePlanResponse.class, tags = {
			"VoyagePlan", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = GetVoyagePlanResponse.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Void.class),
			@ApiResponse(code = 401, message = "Unauthorized (the user cannot be authenticated in the Identity Registry)", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden (Not authorized request forwarded to operator)", response = Void.class),
			@ApiResponse(code = 404, message = "Not Found (the requested voyagePlan is not found)", response = Void.class),
			@ApiResponse(code = 405, message = "Method not allowed", response = Void.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Void.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Void.class) })

	@RequestMapping(value = "/voyagePlans", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<GetVoyagePlanResponse> getVoyagePlans(HttpServletRequest request,
			@ApiParam(value = "Unique identity (UVID) of a voyage plan") @RequestParam(value = "uvid", required = false) String uvid,
			@ApiParam(value = "Status of a route for a voyageplan: 1-Original   2-Planned_for_voyage    3-Optimized 4-Cross_Checked 5-Safety_Checked    6-Approved  7-Used_for_monitoring   8-Inactive") @RequestParam(value = "routeStatus", required = false) String routeStatus);

	@ApiOperation(value = "", notes = "Remove subscription for active Voyage Plan from other services i.e. Enhanced Monitoring", response = Void.class, tags = {
			"VoyagePlan", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Void.class),
			@ApiResponse(code = 401, message = "Unauthorized (the user cannot be authenticated in the Identity Registry)", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 404, message = "Not Found (the requested Voyage Plan is not found)", response = Void.class),
			@ApiResponse(code = 405, message = "Method not allowed", response = Void.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Void.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Void.class) })

	@RequestMapping(value = "/voyagePlans/subscription", produces = {
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> removeVoyagePlanSubscription(HttpServletRequest request,
			@NotNull @ApiParam(value = "Callback expected. Base url of the vis instance as in the Service Registry. The callback response will be sent to the voyagePlans endPoint of the instance", required = true) @RequestParam(value = "callbackEndpoint", required = true) String callbackEndpoint,
			@ApiParam(value = "Unique identity (UVID) of a voyage plan") @RequestParam(value = "uvid", required = false) String uvid);

	@ApiOperation(value = "", notes = "Request subscription for active Voyage Plan from other services i.e. Enhanced Monitoring", response = Void.class, tags = {
			"VoyagePlan", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Void.class),
			@ApiResponse(code = 401, message = "Unauthorized (the user cannot be auhtenticated in the Identity Registry)", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden (Not authorized request forwarded to operator)", response = Void.class),
			@ApiResponse(code = 404, message = "Not Found (the requested Voyage Plan is not found)", response = Void.class),
			@ApiResponse(code = 405, message = "Method not allowed", response = Void.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Void.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Void.class) })

	@RequestMapping(value = "/voyagePlans/subscription", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> subscribeToVoyagePlan(HttpServletRequest request,
			@NotNull @ApiParam(value = "Callback expected. Base URL of the vis instance as in the Service Registry. The callback response will be sent to the voyagePlans endPoint of the instance", required = true) @RequestParam(value = "callbackEndpoint", required = true) String callbackEndpoint,
			@ApiParam(value = "Unique identity (UVID) of a voyageplan. If no uvid is provided, the subscription is to all the active uvid that your organization has access to") @RequestParam(value = "uvid", required = false) String uvid);

	@ApiOperation(value = "", notes = "Upload VoyagePlan to VIS from other services i.e. Route Optimization service.", response = Void.class, tags = {
			"VoyagePlan", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Void.class),
			@ApiResponse(code = 401, message = "Unauthorized (the user cannot be auhtenticated in the Identity Registry)", response = Void.class),
			@ApiResponse(code = 403, message = "Forbidden", response = Void.class),
			@ApiResponse(code = 405, message = "Method not allowed", response = Void.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Void.class),
			@ApiResponse(code = 200, message = "unexpected error", response = Void.class) })

	@RequestMapping(value = "/voyagePlans", produces = { "application/json" }, consumes = {
			"text/xml" }, method = RequestMethod.POST)
	ResponseEntity<Void> uploadVoyagePlan(HttpServletRequest request,
			@ApiParam(value = "Voyage Plan in RTZ v1.1STM. vesselVoyage and routeStatusEnum is required", required = true) @Valid @RequestBody String voyagePlan,
			@ApiParam(value = "Acknowledgement expected. Base URL for VIS as in Service Registry. An ACK is expected to this URL when the receiving private application retrieve the message") @RequestParam(value = "deliveryAckEndPoint", required = false) String deliveryAckEndPoint,
			@ApiParam(value = "Callback expected. Base URL of the VIS instance as in the Service Registry. The callback response will be sent to the voyagePlans endPoint of the instance") @RequestParam(value = "callbackEndpoint", required = false) String callbackEndpoint);

}
